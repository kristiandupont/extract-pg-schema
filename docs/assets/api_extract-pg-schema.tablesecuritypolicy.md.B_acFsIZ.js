import{_ as e,c as i,a0 as a,o as p}from"./chunks/framework.DZKAnWaX.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"api/extract-pg-schema.tablesecuritypolicy.md","filePath":"api/extract-pg-schema.tablesecuritypolicy.md"}'),r={name:"api/extract-pg-schema.tablesecuritypolicy.md"};function s(o,t,l,c,d,h){return p(),i("div",null,t[0]||(t[0]=[a('<p><a href="./">Home</a> &gt; <a href="./extract-pg-schema.html">extract-pg-schema</a> &gt; <a href="./extract-pg-schema.tablesecuritypolicy.html">TableSecurityPolicy</a></p><h2 id="tablesecuritypolicy-interface" tabindex="-1">TableSecurityPolicy interface <a class="header-anchor" href="#tablesecuritypolicy-interface" aria-label="Permalink to &quot;TableSecurityPolicy interface&quot;">​</a></h2><p>Security policy on a table.</p><p><strong>Signature:</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TableSecurityPolicy</span></span></code></pre></div><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><table><thead><tr><th><p>Property</p></th><th><p>Modifiers</p></th><th><p>Type</p></th><th><p>Description</p></th></tr></thead><tbody><tr><td><p><a href="./extract-pg-schema.tablesecuritypolicy.commandtype.html">commandType</a></p></td><td></td><td><p>&quot;ALL&quot; | &quot;SELECT&quot; | &quot;INSERT&quot; | &quot;UPDATE&quot; | &quot;DELETE&quot;</p></td><td><p>Command type the policy applies to. &quot;ALL&quot; if all commands.</p></td></tr><tr><td><p><a href="./extract-pg-schema.tablesecuritypolicy.ispermissive.html">isPermissive</a></p></td><td></td><td><p>boolean</p></td><td><p>Whether the policy is permissive.</p></td></tr><tr><td><p><a href="./extract-pg-schema.tablesecuritypolicy.modifiabilityexpression.html">modifiabilityExpression</a></p></td><td></td><td><p>string | null</p></td><td><p>Modifiability expression of the policy specified by the WITH CHECK clause.</p></td></tr><tr><td><p><a href="./extract-pg-schema.tablesecuritypolicy.name.html">name</a></p></td><td></td><td><p>string</p></td><td><p>Name of the security policy.</p></td></tr><tr><td><p><a href="./extract-pg-schema.tablesecuritypolicy.rolesappliedto.html">rolesAppliedTo</a></p></td><td></td><td><p>string[]</p></td><td><p>Array of roles the policy is applied to. [&quot;public&quot;] if applied to all roles.</p></td></tr><tr><td><p><a href="./extract-pg-schema.tablesecuritypolicy.visibilityexpression.html">visibilityExpression</a></p></td><td></td><td><p>string | null</p></td><td><p>Visibility expression of the policy specified by the USING clause.</p></td></tr></tbody></table>',7)]))}const u=e(r,[["render",s]]);export{y as __pageData,u as default};
