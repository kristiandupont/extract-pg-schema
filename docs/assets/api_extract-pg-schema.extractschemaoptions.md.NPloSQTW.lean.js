import{_ as e,c as a,a0 as s,o as r}from"./chunks/framework.DZKAnWaX.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"api/extract-pg-schema.extractschemaoptions.md","filePath":"api/extract-pg-schema.extractschemaoptions.md"}'),p={name:"api/extract-pg-schema.extractschemaoptions.md"};function o(i,t,c,h,d,n){return r(),a("div",null,t[0]||(t[0]=[s('<p><a href="./">Home</a> &gt; <a href="./extract-pg-schema.html">extract-pg-schema</a> &gt; <a href="./extract-pg-schema.extractschemaoptions.html">ExtractSchemaOptions</a></p><h2 id="extractschemaoptions-interface" tabindex="-1">ExtractSchemaOptions interface <a class="header-anchor" href="#extractschemaoptions-interface" aria-label="Permalink to &quot;ExtractSchemaOptions interface&quot;">​</a></h2><p>This is the options object that can be passed to <code>extractSchemas</code>.</p><p><strong>Signature:</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExtractSchemaOptions</span></span></code></pre></div><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><table><thead><tr><th><p>Property</p></th><th><p>Modifiers</p></th><th><p>Type</p></th><th><p>Description</p></th></tr></thead><tbody><tr><td><p><a href="./extract-pg-schema.extractschemaoptions.onprogress.html">onProgress?</a></p></td><td></td><td><p>() =&gt; void</p></td><td><p><em>(Optional)</em> Called once for each type that is extracted.</p></td></tr><tr><td><p><a href="./extract-pg-schema.extractschemaoptions.onprogressend.html">onProgressEnd?</a></p></td><td></td><td><p>() =&gt; void</p></td><td><p><em>(Optional)</em> Called when all types have been extracted.</p></td></tr><tr><td><p><a href="./extract-pg-schema.extractschemaoptions.onprogressstart.html">onProgressStart?</a></p></td><td></td><td><p>(total: number) =&gt; void</p></td><td><p><em>(Optional)</em> Called with the number of types to extract.</p></td></tr><tr><td><p><a href="./extract-pg-schema.extractschemaoptions.resolveviews.html">resolveViews?</a></p></td><td></td><td><p>boolean</p></td><td><p><em>(Optional)</em> extractShemas will always attempt to parse view definitions to discover the &quot;source&quot; of each column, i.e. the table or view that it is derived from. If this option is set to <code>true</code>, it will attempt to follow this source and copy values like indices, isNullable, etc. so that the view data is closer to what the database reflects.</p></td></tr><tr><td><p><a href="./extract-pg-schema.extractschemaoptions.schemas.html">schemas?</a></p></td><td></td><td><p>string[]</p></td><td><p><em>(Optional)</em> Will contain an array of schema names to extract. If undefined, all non-system schemas will be extracted.</p></td></tr><tr><td><p><a href="./extract-pg-schema.extractschemaoptions.typefilter.html">typeFilter?</a></p></td><td></td><td><p>(pgType: <a href="./extract-pg-schema.pgtype.html">PgType</a>) =&gt; boolean</p></td><td><p><em>(Optional)</em> Filter function that you can use if you want to exclude certain items from the schemas.</p></td></tr></tbody></table>',7)]))}const x=e(p,[["render",o]]);export{m as __pageData,x as default};
